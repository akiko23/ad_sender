import random
import string

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
from aiogram.utils.exceptions import Unauthorized, ChatNotFound

import markups
from config import dp, bot, db, GROUPS, p2p
from states import Advertisement


@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    user_id = msg.from_user.id
    if not db.user_exists(user_id):
        await bot.send_message(user_id,
                               '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –í–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã!'
                               '–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –≤ /help', reply_markup=markups.advertisement_menu())
        db.add_user(user_id)
    else:
        await bot.send_message(user_id, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!', reply_markup=markups.advertisement_menu())


@dp.callback_query_handler(Text("back-to_advertisement_menu"))
async def back_to_main_menu(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markups.advertisement_menu())


@dp.message_handler(commands=['help'])
async def test(msg: types.Message):
    # await bot.send_message(msg.from_user.id,
    #                        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –≠—Ç–æ –±–æ—Ç –¥–ª—è –≤—ã—Å—Ç–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ /menu –¥–ª—è —Ä–∞–±–æ—Ç—ã '
    #                        '—Å –±–æ—Ç–æ–º, –ø–æ–º–æ—â—å —Å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤–∞–ª—é—Ç –≤ /convert.\n–ï—Å–ª–∏ '
    #                        '–≤—ã –Ω–∞—à–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –±–∞–≥, –∏–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å—á–µ—Ç –±–æ—Ç–∞, –ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É '
    #                        '@akiko233')
    await bot.send_message(-1001439847153, "test")

@dp.message_handler(commands=['creator'])
async def test(msg: types.Message):
    await bot.send_message(msg.from_user.id,
                           'C–æ–∑–¥–∞—Ç–µ–ª—å @akiko233')


@dp.callback_query_handler(Text('break_load_process'), state=Advertisement.all_states)
async def break_load(call: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    await state.finish()
    await bot.send_message(call.from_user.id, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è‚ùå',
                           reply_markup=markups.back_to_main_menu)

    db.delete_advertisement(call.from_user.id, db.get_last_id(call.from_user.id))


@dp.callback_query_handler(Text('break_change_process'), state=Advertisement.AdvertisementActions.all_states)
async def break_load(call: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    await state.finish()
    await bot.send_message(call.from_user.id, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è‚ùå'
    if state == Advertisement.AdvertisementActions.change_param
    else '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ‚ùå')


@dp.callback_query_handler(Text(startswith='channels'), state=None)
async def get_channels(call: types.CallbackQuery):
    channels = """üî• [–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏](https://t.me/+zA95WH3y3SoyZTcy) \- 1999‚ÇΩ üî•

üî•[–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ –¢–æ–≤–∞—Ä–∫–∞](https://t.me/postavkatovarkabiznes) \- 999‚ÇΩüî•

üî•[–¢–æ–≤–∞—Ä–∫–∞](https://t.me/optovikw) \- 749‚ÇΩüî•

üî•[–¢–æ–≤–∞—Ä–æ—á–∫–∞](https://t.me/postavshchiki1) \- 499‚ÇΩüî•

üî•[Grand\-Opt](https://t.me/grant_opt) \- 499‚ÇΩüî•

üî•[–ü–æ—Å—Ç–∞–≤–∫–∏ –û–ø—Ç–æ–º](https://t.me/optovik5) \- 449‚ÇΩüî•

üî•[–¢–æ–≤–∞—Ä–æ—á–∫–∞](https://t.me/postavshchiki_opt) \- 399‚ÇΩüî•

üî•[–¢–æ–≤–∞—Ä–Ω—ã–π –±–∏–∑–Ω–µ—Å](https://t.me/postavshchiki_ru) \- 199‚ÇΩüî•

üí•–ï—Å–ª–∏ –±—Ä–∞—Ç—å –≤–æ –≤—Å–µ—Ö, —Ç–æ 5900, –≤–º–µ—Å—Ç–æ 8050‚ÇΩ"""

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É —Ä–µ–∫–ª–∞–º—É\n\n\n" + channels,
                                 reply_markup=markups.get_channels(), parse_mode="MarkdownV2")


@dp.callback_query_handler(Text(startswith="advertisement"))
async def process_payment(call: types.CallbackQuery):
    group_id, price2 = call.data.split('_')[1:]
    price = 10

    comment = f"{call.from_user.id}_{''.join([random.choice(string.ascii_letters) for _ in range(12)])}"
    bill = p2p.bill(amount=price, lifetime=15, comment=comment)

    db.add_check(call.from_user.id, money=price, bill_id=bill.bill_id)
    await bot.send_message(call.from_user.id, f'–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {price} —Ä—É–±–ª–µ–π –Ω–∞ –Ω–∞—à —Å—á–µ—Ç Qiwi\n'
                                              f'–°—Å—ã–ª–∫–∞: {bill.pay_url}\n'
                                              f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–ª–∞—Ç–µ: {comment}',
                           reply_markup=markups.qiwi_buy_menu(url=bill.pay_url, bill=bill.bill_id,
                                                              group_id=group_id))

    await Advertisement.on_check_payment.set()


@dp.callback_query_handler(Text(contains='check_'), state=Advertisement.on_check_payment)
async def check_qiwi_pay(call: types.CallbackQuery, state: FSMContext):
    bill, group_id = call.data.split("_")[1:]
    info = db.get_check(bill)

    if info is not False:
        if str(p2p.check(bill_id=bill).status) == "PAID":
            await state.set_data({
                "group_id": group_id
            })

            db.delete_check(bill_id=bill)
            await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

            user_name = call.from_user.username
            db.set_advertisement_user(call.from_user.id, user_name)

            await bot.send_message(call.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n'
                                                      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
                                   reply_markup=markups.break_load_process_keyboard)

            await Advertisement.photo.set()
        else:
            await bot.send_message(call.from_user.id, "–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç",
                                   reply_markup=markups.qiwi_buy_menu(isUrl=False, bill=bill, group_id=group_id)
                                   )
    else:
        await bot.send_message(call.from_user.id, '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')


@dp.message_handler(content_types=['photo', 'video'], state=Advertisement.photo)
async def set_advertisement_photo(message: types.Message):
    if message.content_type == 'photo':
        media_id = message.photo[0].file_id
    else:
        media_id = message.video.file_id

    user_id = message.from_user.id
    db.set_something(db.get_last_id(user_id), 'photo_id', media_id)

    await bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã", reply_markup=markups.break_load_process_keyboard)
    await Advertisement.description.set()


@dp.message_handler(content_types=['text'], state=Advertisement.description)
async def set_advertisement_description(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    db.set_something(db.get_last_id(user_id), 'description', message.text)

    group_id = (await state.get_data())["group_id"]

    last_user_advertisement = db.get_user_advertisements_data(user_id)[-1]

    try:
        await bot.send_photo(user_id, last_user_advertisement[2],
                             caption=f"–í–∞—à–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ‚úÖ\n"
                                     f"\n–¢–µ–∫—Å—Ç: {last_user_advertisement[4]}",
                             reply_markup=markups.back_to_main_menu)
    except:
        await bot.send_video(user_id, last_user_advertisement[2],
                             caption=f"–í–∞—à–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ‚úÖ\n"
                                     f"\n–¢–µ–∫—Å—Ç: {last_user_advertisement[4]}",
                             reply_markup=markups.back_to_main_menu)

    if group_id == "all":
        for u_id in GROUPS:
            try:
                await bot.send_photo(u_id, last_user_advertisement[2], caption=last_user_advertisement[4],
                                     reply_markup=markups.back_to_main_menu)
            except:
                await bot.send_video(u_id, last_user_advertisement[2], caption=last_user_advertisement[4],
                                     reply_markup=markups.back_to_main_menu)
    else:
        try:
            await bot.send_photo(group_id, last_user_advertisement[2], caption=last_user_advertisement[4],
                                 reply_markup=markups.back_to_main_menu)
        except:
            await bot.send_video(group_id, last_user_advertisement[2], caption=last_user_advertisement[4],
                                 reply_markup=markups.back_to_main_menu)

    await state.finish()


@dp.message_handler(content_types=['text'])
async def get_text_from_user(msg: types.Message):
    await bot.send_message(msg.from_user.id, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
